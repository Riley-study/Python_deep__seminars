__all__ = ['test_storage', 'print_results']

# Создайте модуль с функцией внутри. Функция получает на вход загадку,
# список с возможными вариантами отгадок и количество попыток на угадывание.
# Программа возвращает номер попытки, с которой была отгадана загадка или ноль, если попытки исчерпаны.

results = dict()


def secrets(puzzle: str, answers: list[str], counter: int) -> int:
    print(puzzle)
    for i in range(counter):
        ans = input("введите ответ: ")
        if ans in answers:
            answer_countrer(puzzle, i+1)
            return i + 1
    answer_countrer(puzzle, 0)
    return 0


def test_storage():
    dict_puzzle = {'Зимой и летом одним цветом': ['ель', 'ёлка', 'сосна'],
                   'Не лает, не кусает, в дом не пускает': ['замок'],
                   'Сидит дед во сто шуб одет': ['лук', 'луковица']}
    for test_data in dict_puzzle.items():
        print(secrets(*test_data, counter=3))


def answer_countrer(puzzle: str, number_anwers: int):
    global results
    results.setdefault(puzzle, number_anwers)


def print_results():
    global results
    for k,v in results.items():
        print(f'({k}: {v}) ')


# Добавьте в модуль с загадками функцию, которая хранит словарь списков. Ключ словаря - загадка,
# значение - список с отгадками. Функция в цикле вызывает загадывающую функцию, чтобы передать ей все свои загадки.

if __name__ == '__main__':
    # print(secrets('Зимой и летом одним цветом', ['ель', 'ёлка', 'сосна'], 3))
    test_storage()
    print_results()

# Добавьте в модуль с загадками функцию, которая принимает на вход строку (текст загадки) и число
# (номер попытки, с которой она угадана). Функция формирует словарь с информацией о результатах отгадывания.
# Для хранения используйте защищённый словарь уровня модуля.
# Отдельно напишите функцию, которая выводит результаты угадывания из защищённого словаря в удобном для чтения виде.
# Для формирования результатов используйте генераторное выражение.

